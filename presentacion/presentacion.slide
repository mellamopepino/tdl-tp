# Introducción a Go
Teoría de Lenguajes
Summary: Presentación del lenguaje Go para la materia Teoría de Lenguajes

Joaquín Casal

Delfina García Villamor

Lucía Kasman

Franco Schischlo

//////////////////////////////////////////////////

## Características generales

- Lenguaje de propósito general
- **Paradigma**: Estructurado y procedural
- **Modelo**: Imperativo
- **Tipado**: estático e inferido (duck typing)
- Compilado
- Tiene garbage collector
- TDAs:

        - Abierto para el mismo paquete, cerrado para paquetes distintos
        - Con estado
        - Empaquetado y no empaquetado
- Pasaje por valor y por referencia (dependiendo el tipo de dato)

//////////////////////////////////////////////////

## Nacimiento y motivación

Desarrollado en Google y lanzado en 2009.

Buscaban alivianar problemas comunes en su desarrollo.

Como los **builds** lentos y la falta de **escalabilidad**.

//////////////////////////////////////////////////

## Nacimiento y motivación

Y entre compilación y compilación...

.image images/my-codes-compiling.png

//////////////////////////////////////////////////

## Nacimiento y motivación

Llegaron a un lenguaje:
- Rápido de buildear.
- Escalable.
- Con sintaxis clara.
- Y features modernas (ej: concurrencia).

.image images/gopher-sixpack.png

//////////////////////////////////////////////////

## Características Core

Se destaca por:
- **Simpleza**: Sintaxis fácil de aprender y features necesarios.
- **Concurrencia**: Uso de _goroutines_ y _channels_.
- **Velocidad de compilación y ejecución**
- **Biblioteca estándar**: Extensa y completa (bien documentada)
- **Multiplataforma**

entre otros...

//////////////////////////////////////////////////

## Características Core

Simple puede ser expresivo...

.image images/simplicity.png 400 700

//////////////////////////////////////////////////

## Características Core

Un poco de sintaxis y tipos de datos...

.image images/technic.png

//////////////////////////////////////////////////

## Características Core

Set de keywords:

.image images/keywords.png

(Dato de color: son 25, C tiene 32, y C++ 95….)

Set de operadores y puntuación:

.image images/operators.png

//////////////////////////////////////////////////

## Características Core

 **Tipos de datos básicos:**

- int  int8  int16  int32  int64
- uint uint8 uint16 uint32 uint64 uintptr
- float32 float64
- complex64 complex128
- string
- bool
- byte // alias de uint8
- rune // alias de int32 - unicode code point

//////////////////////////////////////////////////

## Características Core

**Tipos de datos (continuación):**

Otros:

- struct
- interface
- chan (channels)
- array (longitud estática)
- slice (longitud dinámica)
- map

entre otros...
//////////////////////////////////////////////////

## Características Core

**Inicialización de Variables:**

Las variables, si no se les define un valor al declararlas, se las inicializa con un valor (a esto se lo llama _Zero_ _Value_ _Initialization_)

- *0* para enteras
- *0.0* para punto flotante
- *false* para bool
- *""* para string
- *nil* para interfaces, slices, channels, maps, punteros y funciones.

//////////////////////////////////////////////////

## Características Core

**Interfaces:**

.image images/interface.png 400 500

//////////////////////////////////////////////////

## Características Core

- Una interfaz es una colección de firmas de métodos, es decir, son declaraciones de métodos sin cuerpo, cuyo comportamiento está dado por quien los implemente (de forma implicita)
- Extensamente usadas en la standard library.

//////////////////////////////////////////////////

## Características Core

**Concurrencia:**

.image images/goroutines.png

//////////////////////////////////////////////////

## Características Core

**Goroutines:**

- Son hilos verdes administrados por Go runtime
- Muy livianas (alrededor de los 2kb, y en caso de ser necesario, el stack incrementa/decrece de forma dinámica)
- Funcionan de forma cooperativa (cooperative multitasking)

Formas de sincronizacion:
- Channels
- sync.WaitGroup

//////////////////////////////////////////////////

## Características Core

**Channels:**

- Es un tipo de dato que nos permite enviar y recibir datos a través de él.
- Son bloqueantes, salvo si se les pasa una capacidad al momento de crearlos (en cuyo caso se bloquean al estar llenos, o vacios)

_Creación_:

	                llamada := make(chan string)

_Envío_:

	                llamada <- "Hola, buen dia"

_Recepción_:

	                saludo, ok = <- llamada

(el ok se utiliza para chequear el estado del canal)

_Cerrar channel_:

	                close(llamada)

//////////////////////////////////////////////////

## Ejemplo basico

Un poco de código:

//.code examples/integrador.go /START OMIT/,/END OMIT/
.play examples/integrador.go /START OMIT/,/END OMIT/
//////////////////////////////////////////////////


## Caso de estudio

Mercadolibre? Creo que garpa que hablemos de Meli porque es algo local que todo el mundo conoce

.link https://go.dev/solutions/mercadolibre/
.link https://github.com/mercadolibre/golang-tutorial-public

//////////////////////////////////////////////////

## Conclusiones

//////////////////////////////////////////////////

Vimos que Go es bueno en cuanto a:

- Manejo de concurrencia
- Escalabilidad
- Performance
- Portabilidad
- Simplicidad
- Networking

Entonces...

//////////////////////////////////////////////////

##

**Cuando usar Go**

- Servicios distribuidos
- Aplicaciones standalone
- Servicios web

**Cuando no usar Go**

- Aplicaciones con interfaz gráfica
- Aplicaciones orientadas a objetos
- Otras cosas que Go no se banca

//////////////////////////////////////////////////

## Referencias

.link golang.org
.link golang.org/doc
.link blog.golang.org
.link talks.golang.org
.link tour.golang.org
.link github.com/golang/go/wiki

//////////////////////////////////////////////////

## Esta es la primer slide

Acá podemos escribir texto

- Podemos
- Tener
- Bullets

Código:

        hello := 1
        bye := "bye"

Formatos (markdown):

_cursiva_  
**negrita**  
Links: Visit [the Go home page](https://golang.org/).

//////////////////////////////////////////////////

## Estadísticas 

Comparación entre Go y Java para calcular un factorial:

.image images/comparison-factorial.png


//////////////////////////////////////////////////

## Para un programa que lee un archivo de 64k, corre un hash SHA-256 1000 veces:

.image images/n1000r300.png

Con 300 requests, podemos observar que Go es más veloz que los otros lenguajes.

//////////////////////////////////////////////////

## Según la encuesta de StackOverflow 2019:

La gente que programa en Go recibe el 3er mejor salario en todo el mundo:

.image images/highest-salary-global.png


Total de encuestados: 88,883 desarrolladores de 179 países.

//////////////////////////////////////////////////

## Según la encuesta de StackOverflow 2019:

Go es el 8vo lenguaje de programación más amado:

.image images/loved.png

//////////////////////////////////////////////////

## Según la encuesta de StackOverflow 2019:

Go es 3er lenguaje más interesante para aprender:

.image images/wanted.png

//////////////////////////////////////////////////

## Segunda diapositiva: comandos (.code)

Sin start omit y end omit

.code examples/hello.go

Con start omit y end omit

.code examples/hello.go /START OMIT/,/END OMIT/

## Tercera diapositiva: comandos (.play)

.play examples/hello.go /START OMIT/,/END OMIT/

## Cuarta diapositiva: comandos (.image)

Gopher vs actual gopher

.image images/gopher.png

.image images/actual-gopher.jpg

## Quinta diapositiva: comandos (.image)

Gopher gif

.image images/gopher.gif
